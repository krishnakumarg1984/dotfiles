if has('win32') || has('win64')
    if empty(glob('H:\cygwin_64_install\home\kg314\AppData\Local\nvim\autoload\plug.vim'))
	silent !curl -fLo H:\cygwin_64_install\home\kg314\AppData\Local\nvim\autoload\plug.vim --create-dirs
		    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
	augroup vimplug
	    autocmd!
	    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
	augroup END
    endif
else
    if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
	silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
		    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
	augroup vimplug
	    autocmd!
	    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
	augroup END
    endif
endif


if has('win32') || has('win64')
    call plug#begin('H:\cygwin_64_install\home\kg314\AppData\Local\nvim\plugged')
    source H:\cygwin_64_install\home\kg314\dotfiles\vim\plugcalls.vim
    call plug#end()
else
    call plug#begin('~/.local/share/nvim/plugged')
    source ~/dotfiles/vim/plugcalls.vim
    call plug#end()
endif


if !has('nvim')
    set autoindent " Use indent of previous line on new lines
    filetype plugin indent on
    syntax enable
    set autoread   " Autoread when a file is changed from outside. Also set by the terminus plugin
    set background=dark

    " Let me backspace over pretty much anything
    set backspace+=eol    " Line breaks
    set backspace+=indent " Spaces from 'autoindent'
    set backspace+=start  " The start of current insertion

    set belloff = all
    cscopeverbose enable
    set history = 10000   " Keep much more command and search history
    set hlsearch          " Highlight completed searches; clear on reload
    set incsearch         " Show search matches as I type my pattern
    set laststatus=2
    set nrformats-=octal  " Treat numbers with a leading zero as decimal, not octal

    if has('cmdline_info')
        set ruler         " Show the ruler
        set showcmd
    endif

    " Make sessions usable
    if exists('+sessionoptions')
        set sessionoptions-=options       " No global options or mappings
    endif

    set smarttab
    set tabpagemax=50

    set tags=./tags;,tags
    " set tags=tags;~,.tags;~
    " set tags=./tags;/   " recurse up directories looking for tag files

    set ttyfast
    set wildmenu
    " set cpoptions+=J

endif

set cpoptions-=a "Stop :read from annoyingly setting the alternative buffer

if has('gui_running')||(has("termguicolors"))||has('termguicolors')
    " set termguicolors
    " let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    " let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    silent! colorscheme gruvbox
endif

" enable italics for comments
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

"
" " optional reset cursor on start:
" augroup mycursorshapeCmds
"     au!
"     autocmd VimEnter * silent !echo -ne "\e[2 q"
" augroup END


" The all-important default indent settings; filetypes to tweak
set expandtab      " Use spaces instead of tabs
set copyindent     " Copy the previous indentation on autoindenting
set preserveindent
" set smartindent
set shiftwidth=4   " Indent with four spaces
set softtabstop=4  " Insert four spaces with tab key
set matchpairs+=<:>

" Try to keep backups in one system-appropriate dir
if has('win32') || has('win64')
    if has('nvim')
        if !isdirectory("H:\cygwin_64_install\home\kg314\AppData\Local\nvim\backup-dir")
            call mkdir('H:\cygwin_64_install\home\kg314\AppData\Local\nvim\backup-dir','p')
        endif
        set backupdir=H:\cygwin_64_install\home\kg314\AppData\Local\nvim\backup-dir
    else
        set backupdir=~\vimfiles\cache\backup
    endif
    set backup
else
    if !isdirectory($HOME."/.vim/backup-dir")
        call mkdir($HOME."/.vim/backup-dir", "", 0700)
    endif
    set backupdir=~/.vim/backup-dir
endif

" Add some paths not to back up
if !has('unix')
    set backupskip^=/dev/shm/*  " Shared memory RAM disk
    set backupskip^=/var/tmp/*  " Debian's $TMPDIR for sudoedit(8)
    " set backupskip=/tmp/*,/private/tmp/*" " Make Vim able to edit crontab files again.
endif

" Indent wrapped lines
if has('linebreak')
    set linebreak               " Wrap lines at convenient point (only affects the on-screen display, not actual content in file) " Break lines at word boundaries
    let &showbreak='↪ '
    " set showbreak=…
    set breakat=\ \ ;:,!?
    if exists('+breakindent')
        set breakindentopt=shift:2,sbr
        silent! set breakindent
    endif
endif

" Clear default 'comments' value, let the filetype handle it
" set comments=

" Add completion options
if exists('+completeopt')
    " set completeopt+=longest  " Insert longest common substring
    " set completeopt+=menuone  " Show the menu even if only one match
    set completeopt+=longest,menu,menuone,noselect,preview
    set completeopt+=noinsert
endif

set complete=.,w,b,u,t,i,kspell,U,s,k,d,] ". till i is the default. . = current buffer. w  = any other windows, b = any other buffers opened, u = unopened buffers, t = tags, i = current and included files
set complete+=U,s,k,d,]

set confirm " Give me a prompt instead of just rejecting risky :write, :saveas

" if exists('$TMUX')
"     let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
"     let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
" else
"     let &t_SI = "\e[6 q"
"     let &t_EI = "\e[2 q"
"     let &t_SI = "\<Esc>]50;CursorShape=1\x7"
"     let &t_EI = "\<Esc>]50;CursorShape=0\x7"
" endif

if exists('+cursorline')
    " Only turn on 'cursorline' if my colorscheme loaded
    " if exists('g:colors_name') && g:colors_name ==# 'sahara'
    "   set cursorline
    " endif

    " Only show cursorline in the current window and in normal mode.
    augroup cline
        autocmd!
        autocmd WinLeave,InsertEnter * setlocal nocursorline
        autocmd WinEnter,InsertLeave * setlocal cursorline
    augroup END
endif

" Try to keep swapfiles in one system-appropriate dir
set directory^=~/.vim/cache/swap//
if has('win32') || has('win64')
    set directory-=~/.vim/cache/swap//
    if has('nvim')
        set directory^=H:\cygwin_64_install\home\kg314\AppData\Local\nvim\backup-dir\
    else
        set directory^=~/vimfiles/cache/swap//
    endif
endif

set updatecount=100 " After typing these no. of characters, the swap file will be written to disk.  When zero, no swap file will be created at all (see chapter on recovery |crash-recovery|).
set updatetime=250  " milliseconds elapsed before which swap file will be written to disk (250 ms is recommende by gitgutter plugin)

" Use UTF-8 if we can and env LANG didn't tell us not to
if has('multi_byte') && !exists('$LANG') && &encoding ==# 'latin1'
    if !has('nvim')
        setglobal termencoding=utf-8 fileencodings= " termencoding has been removed in neovim
        scriptencoding utf-8
        set encoding=utf-8 " String-encoding used internally and for |RPC| communication. Always UTF-8.
    endif
endif

" Don't wait for a key after Escape in insert mode
" In vim-tiny but not NeoVim, so just suppress errors
if !has('nvim')
    silent! set noesckeys
endif

if has('folding')
    set foldenable
    set foldlevelstart=99
    " set foldmethod=indent
endif

" Delete comment leaders when joining lines, if supported (+j)
augroup formatoptionsctrl
    autocmd!
    autocmd FileType * setlocal formatoptions+=j formatoptions-=c formatoptions-=r formatoptions-=o "default is tcq
augroup END

set winaltkeys=no

" " If available, use GNU grep niceties for searching, but system calls are very expensive for startup
" if system('grep --version') =~# '^grep (GNU grep)'
"     set grepprg=grep\ -HnRs\ --exclude='.git*'
" endif

set hidden       " Allow buffers to have changes without being displayed
set include=     " Don't assume I'm editing C; let the filetype set this
set nojoinspaces " Don't join lines with two spaces at the end of sentences
set lazyredraw   " Don't redraw the screen during batch execution

" Define extra 'list' display characters
if !has('gui_running')
    set listchars+=extends:>  " Unwrapped text to screen right
    set listchars+=precedes:< " Unwrapped text to screen left
    set listchars=tab:▸\      " Tab characters, preserve width
    set listchars+=trail:·    " Trailing spaces
    set listchars+=nbsp:+     " Non-breaking spaces
    set list
endif

" set nomodeline " Don't allow setting options via buffer content

" Options for file search with gf/:find
if !has('win32') || !has('win64')
    set path-=/usr/include  " Let the C/C++ filetypes set that
endif
" set path+=**            " Search current directory's whole tree


" Make sessions usable
if exists('+sessionoptions')
    set sessionoptions-=localoptions  " No buffer options or mappings
endif

" Don't show startup splash screen
silent! set shortmess+=cI

" New window positioning
set splitbelow  " Below the current window, not above
set splitright  " Right of the current window, not left

" Give me a bit longer to complete mappings
set timeoutlen=3000
set timeout       " time out on mappings and keycodes (stronger of the two conditions)
set ttimeoutlen=0 " A non-negative number here will make the delay to be timeoutlen


" No terminal mouse, even if we could
" silent! set ttymouse=

" Keep undo files, hopefully in a dedicated directory
if has('persistent_undo')
    if has('win32') || has('win64')
        " if empty(glob(&undodir))
        "     silent call system('mkdir -p ~/vimfiles/cache/undo/')
        " endif
        if has('nvim')
            set undodir=H:\cygwin_64_install\home\kg314\AppData\Local\nvim\undo-dir\
        else
            set undodir=~/vimfiles/cache/undo
    	endif
    else
        if !isdirectory($HOME."/.vim/undo-dir")
            call mkdir($HOME."/.vim/undo-dir", "", 0700)
        endif
        set undodir=~/.vim/undo-dir
    endif
    set undofile
    set undolevels=1000
    set undoreload=10000
endif

" set wildmode=list:longest " Tab press completes and lists
set wildmode=longest,list:full
silent! set wildignorecase " Case insensitive, if supported
set wildchar=<TAB>         " Character for CLI expansion (TAB-completion)

" Let me move beyond buffer text only in visual block mode
if exists('+virtualedit')
    set virtualedit+=block
endif

" Never beep at me
set visualbell t_vb=
set cmdheight=2 " Height of command-line (easy-readable)

augroup FileChangedAlert
    " Helps if you have to use another editor on the same file
    autocmd! FileChangedShell * echoerr "File has been changed outside of Vim."
augroup END


set display+=lastline
if &modifiable
    set fileformat=unix
endif
set fileformats=unix,dos,mac

" set formatlistpat=^\\s*[-*]\\s\\+
" set formatlistpat+=\\\|^\\s*(\\(\\d\\+\\\|[a-z]\\))\\s\\+
" set formatlistpat+=\\\|^\\s*\\(\\d\\+\\\|[a-z]\\)[:).]\\s\\+

set formatlistpat=^\\s*                " Optional leading whitespace
set formatlistpat+=[                   " Start character class
set formatlistpat+=\\[({]\\?           " |  Optionally match opening punctuation
set formatlistpat+=\\(                 " |  Start group
set formatlistpat+=[0-9]\\+            " |  |  Numbers
set formatlistpat+=\\\|                " |  |  or
set formatlistpat+=[a-zA-Z]\\+         " |  |  Letters
set formatlistpat+=\\)                 " |  End group
set formatlistpat+=[\\]:.)}            " |  Closing punctuation
set formatlistpat+=]                   " End character class
set formatlistpat+=\\s\\+              " One or more spaces
set formatlistpat+=\\\|                " or
set formatlistpat+=^\\s*[-–+o*•]\\s\\+ " Bullet points

set helpheight=12

set incsearch

set ignorecase  " Ignore case search for normal letters
set infercase   " Ignore case on insert completion
set smartcase   " Do case-sensitive search if pattern contains upper case letters

" set diffopt=filler,foldcolumn:0,context:4
set fillchars=vert:│,fold:\ ,diff:⣿

set isfname-={,}
set keywordprg=:help
set linespace=0      " No extra spaces between rows

set magic            " Make regex a little easier to type

" set noshowmode     " Display the current mode
set nostartofline    " The cursor is kept in the same column (if possible)

set number
set relativenumber
" set numberwidth=5               " Width of the line-no. column
" augroup changenumbering
"     autocmd!
"     autocmd InsertEnter * :set norelativenumber
"     autocmd InsertLeave * :set relativenumber
" augroup END

" set report=0            " Threshold for reporting number of lines changed.

set previewheight=20
set pumheight=15          " Set popup menu max height

set scrolljump=5    " How many lines to scroll at a time, make scrolling appears faster (i.e. when you move the cursor close to the vertical limits of display, how many more lines to reveal ?)
set scrolloff=3     " Minimal number of screen lines to keep above and below the cursor
set sidescroll=3    " The minimal number of columns to scroll horizontally
set sidescrolloff=5 " The minimal number of screen columns to keep to the left and to the right of the cursor

set showmatch
set matchtime=2

set suffixesadd=.py,.m,.mat,.gv,.tex ":find will work harder for these filetypes
set synmaxcol=300   " Boost performance in rendering long lines

set tabpagemax=15   " Maximum number of tab pages to be opened by the |-p| command line argument or the ":tab all" command. |tabpage|

set title
set titleold="Terminal"
set titlestring=%f%(\ [%M]%)

set viewoptions=cursor,folds,slash,unix

" set winminheight=4  " Minimum height of windows

" Ignore the following type of files when tab completing
set wildignore+=*.jpeg,*.gif,*.bmp,*.pdf,*.class,*.dmg,*.DS_Store,*.lnk,*.ini,*.mod,*.jpg,*.png,*.tiff,*.psd
set wildignore+=*/tmp/*,*.so,*.db,*.sqlite
set wildignore+=*.pyc,*.a,*.dll,*.bak,*.exe,*.bin,*.dll,*.manifest
set wildignore+=*.aux,*.bbl,*.blg,*.brf,*.fls,*.fdb_latexmk,*.synctex.gz,*.pdf,*.out,*.spl,*.sw?,*.luac,migrations,*.orig,*.fasl,*.dx64fsl,*.lx64fsl

" Disable output and VCS files
set wildignore+=*.o,*.out,*.rbc,*.rbo,*.gem,CVS/*,*.svn,*.hg,*.git
set wildignore+=*/.git/*,*/.svn/*,*/__pycache__/*,*/build/**
set wildignore+=*.mod

" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz,,*\\tmp\\*

" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

" Ignore build dir
set wildignore+=build/*,media/*

" Ignore node modules
set wildignore+=node_modules/*,bower_components/*

" Disable temp and backup files
set wildignore+=*.swp,*~,._*
set wildignore+=*.obj,*.luac,*.dats,__pycache__
set wildignore+=types_*taghl,tags
set wildignore+=*~

highlight clear SignColumn     " SignColumn should match background,SignColumn column where |signs| are displayed
highlight Comment cterm=italic

hi link HelpBar Normal
hi link HelpStar Normal

" Vim needs a more POSIX compatible shell than fish for certain functionality to work, such as :%!, compressed help pages and many third-party addons.  If
" you use fish as your login shell or launch Vim from fish, you need to set shell to something else in your ~/.vimrc.
if !has('win32') || !has('win64')
    if &shell =~# 'fish$'
    	set shell=/usr/bin/sh
    endif
endif

" augroup completedone
"     autocmd!
"     " autocmd CompleteDone * silent! pclose!
"     " autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
" augroup END

highlight OverLength ctermfg=0 ctermbg=3
match OverLength /\%121v/

nnoremap J      mzJ`z
nnoremap dp     dp]c
nnoremap do     do]c
" nnoremap '      `

" nnoremap <leader>q gqip
nnoremap : ;
nnoremap ; :
nnoremap Y y$

" nnoremap <c-h> <c-w>h
" nnoremap <c-j> <c-w>j
" nnoremap <c-k> <c-w>k
" nnoremap <c-l> <c-w>l

nnoremap <Space> za

" Use sane regexes
nnoremap / /\v
vnoremap / /\v
nnoremap ? ?\v
vnoremap ? ?\v

" " Center screen on next/previous selection.
" nnoremap n nzz
" nnoremap N Nzz


noremap 0 ^  " Go to the first non-blank character of a line
noremap ^ 0  " Just in case you need to go to the very beginning of a line

" Visual line repeat
xnoremap . :normal .<CR>
xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

function! ExecuteMacroOverVisualRange()
    echo '@'.getcmdline()
    execute ":'<,'>normal @".nr2char(getchar())
endfunction

" Move across wrapped lines like regular lines
map k gk
map j gj
map <Up> gk
map <Down> gj

nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'

" nnoremap gV     `[V`]

cnoremap <c-n>  <down>
cnoremap <c-p> <up>

" noremap <Leader>f :filetype detect<CR>

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv
xnoremap > >gv
xnoremap < <gv
" xnoremap < <gvoremap w!! w !sudo tee > /dev/null %

vnoremap y myy`y
vnoremap Y myY`y

" "" Move visual block
" vnoremap J :m '>+1<CR>gv=gv
" vnoremap K :m '<-2<CR>gv=gv

" Disable some mappings
noremap  <f1>   <nop>
inoremap <f1>   <nop>
nnoremap Q      <nop> " disables ex-mode

" CTRL-C doesn't trigger the InsertLeave autocmd . map to <ESC> instead.
inoremap <c-c> <ESC>

" Navigate folds
nnoremap          zf zMzvzz
nnoremap <silent> zj :silent! normal! zc<cr>zjzvzz
nnoremap <silent> zk :silent! normal! zc<cr>zkzvzz[z

cnoreabbrev <expr> w getcmdtype() == ":" && getcmdline() == 'w' ? 'up' : 'w'

if !has('win32') || !has('win64')
    augroup disableTempUndo
        autocmd!
        autocmd BufWritePre /tmp/* setlocal noundofile
    augroup END
endif

let g:netrw_altv           = 1
let g:netrw_banner         = 0
let g:netrw_browse_split   = 4 " Open file in previous buffer
let g:netrw_fastbrowse     = 2
let g:netrw_keepdir        = 0
let g:netrw_list_hide      = netrw_gitignore#Hide()
let g:netrw_list_hide     .= ',\(^\|\s\s\)\zs\.\S\+'
let g:netrw_list_hide     .= '\.un\~$'
let g:netrw_liststyle      = 3 " Use tree-mode as default view
let g:netrw_preview        = 1 " preview window shown in a vertically split
let g:netrw_retmap         = 1
let g:netrw_silent         = 1
" let g:netrw_sort_by        = 'time'
" let g:netrw_sort_direction = 'reverse'
let g:netrw_sort_options   = 'i'
let g:netrw_sort_sequence  = '[\/]$,*'
let g:netrw_special_syntax = 1
let g:netrw_winsize        = 20


" augroup reload_vimrc
"     autocmd!
"     autocmd! BufWritePost $MYVIMRC,$MYGVIMRC nested source %
"     au FocusLost * :wa
" augroup END

" "" The PC is fast enough, do syntax highlight syncing from start unless 200 lines
" augroup vimrc-sync-fromstart
"     autocmd!
"     autocmd BufEnter * :syntax sync maxlines=200
" augroup END

"" Remember cursor position
augroup vimrc-remember-cursor-position
    autocmd!
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

" Disable a lot of unnecessary internal plugins
let g:loaded_2html_plugin     = 1
let g:loaded_getscriptPlugin  = 1
let g:loaded_gzip             = 1
let g:loaded_logipat          = 1
let g:loaded_rrhelper         = 1
let g:loaded_spellfile_plugin = 1
let g:loaded_tarPlugin        = 1
let g:loaded_vimballPlugin    = 1
let g:loaded_zipPlugin        = 1
let g:loaded_matchparen       = 1

let loaded_matchit = 1

" checktime is set by the wincent/terminus plugin
" augroup checktimeaugroup
"     autocmd!
"     au FocusGained,BufEnter * :checktime
"     " autocmd FocusGained,CursorHold ?* if getcmdwintype() == '' | checktime
" augroup END

" Remap normal/visual & to preserve substitution flags
nnoremap <silent> & :&&<CR>
xnoremap <silent> & :&&<CR>

"=====[ Make jump-selections work better in visual block mode ]=================
xnoremap <expr>  G   'G' . virtcol('.') . "\|"
xnoremap <expr>  }   '}' . virtcol('.') . "\|"
xnoremap <expr>  {   '{' . virtcol('.') . "\|"

" show options if tag has multiple matches
nnoremap <C-]> g<C-]>

" \e forces a buffer to be editable
nnoremap <Bslash>e :<C-U>setlocal modifiable noreadonly<CR>

" \g changes directory to the current file's location
" nnoremap <Bslash>g :<C-U>cd %:h<CR>:pwd<CR>

" \h toggles highlighting search results
" nnoremap <Bslash>h :<C-U>set hlsearch! hlsearch?<CR>

" \R reloads ~/.vimrc
" nnoremap <Bslash>R :<C-U>source $MYVIMRC<CR>

" \s toggles spell checking
nnoremap <Bslash>s :<C-U>setlocal spell! spell?<CR>

" \t shows current filetype
" nnoremap <Bslash>t :<C-U>setlocal filetype?<CR>
" \T clears filetype
" nnoremap <Bslash>T :<C-U>setlocal filetype=<CR>

" \= runs the whole buffer through =, preserving position
nnoremap <Bslash>= :<C-U>call vimrc#Anchor('1G=G')<CR>
" \+ runs the whole buffer through gq, preserving position
nnoremap <Bslash>+ :<C-U>call vimrc#Anchor('1GgqG')<CR>

" Source any .vim files from ~/.vim/config
" runtime! config/*.vim

" runtime! shebang_detection.vim
" runtime! filetype.vim
"

" https://vi.stackexchange.com/questions/7179/preventing-ex-commands-from-altering-the-screen
" keep screen view while executing ex command
" function! KeepEx(arg)
"   let l:winview = winsaveview()
"   execute a:arg
"   call winrestview(l:winview)
" endfunction
"
" command! -nargs=+ -completion=command K :call KeepEx("<args>")

" https://vimrcfu.com/snippet/186  " let terminal resize scale the internal windows
augroup autoresizewindows
    autocmd!
    autocmd VimResized * :wincmd =
augroup END

" https://vimrcfu.com/snippet/116
" Display the numbered registers, press a key and paste it to the buffer
" function! Reg()
"     reg
"     echo "Register: "
"     let char = nr2char(getchar())
"     if char != "\<Esc>"
"         execute "normal! \"".char."p"
"     endif
"     redraw
" endfunction

" command! -nargs=0 Reg call Reg() " Provides the useful :Reg command

" inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<cr>"

" My brain can't ever remember digraph codes
inoremap <c-k><c-k> <esc>:help digraph-table<cr>

if has('win32') || has('win64')
    source H:\cygwin_64_install\home\kg314\dotfiles\vim\xvim_common_plugin_mappings.vim
    source H:\cygwin_64_install\home\kg314\dotfiles\vim\filetype.vim
else
    source ~/dotfiles/vim/xvim_common_plugin_mappings.vim
    source ~/dotfiles/vim/filetype.vim
endif

set conceallevel=0

let g:tex_flavor = 'latex'
" let g:tex_stylish = 1
let g:tex_conceal = ''
let g:tex_isk='48-57,a-z,A-Z,192-255,:'

set diffopt=filler,vertical,foldcolumn:0,context:4
set diffopt+=iwhiteall
set diffopt+=hiddenoff


if has('patch-8.1.360') || has('nvim')
    set diffopt+=internal,algorithm:patience,indent-heuristic
endif

tnoremap <Esc> <C-\><C-n>

if has('nvim')
    set fillchars+=eob:\ |  " no ~ for end-of-buffer lines.
endif

if exists('&inccommand')
    set inccommand=split
endif

" https://www.reddit.com/r/neovim/comments/b7ie4e/where_to_find_added_features_ie_vscodeesque/
if has('nvim')
    set wildoptions+="pum"
    if &wildoptions=="pum"
        cnoremap <up> <c-p>
        cnoremap <down> <c-n>
    endif
endif

set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)
set tagrelative " use relative paths for tags

" https://vimways.org/2018/vim-and-git/
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" function! EmptyBuffer()
"   if @% == ""
"     setfiletype txt
"   endif
" endfunction

"augroup EmptyTheBuffer
"    autocmd!
"    autocmd BufEnter * call EmptyBuffer()
"augroup END

" https://bluz71.github.io/2017/05/15/vim-tips-tricks.html
nnoremap <silent> \c :let @/='\<'.expand('<cword>').'\>'<CR>cgn
xnoremap <silent> \c "sy:let @/=@s<CR>cgn
