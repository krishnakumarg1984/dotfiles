if has('nvim') " Check if using Neovim & execute non-blocking vim-plug calls (i.e. withouot the --sync flag)
    if has('win32') || has('win64') " Check for windows platform (Neovim)
        if empty(glob('H:\cygwin_64_install\home\kg314\AppData\Local\nvim\autoload\plug.vim'))
            silent !curl -fLo H:\cygwin_64_install\home\kg314\AppData\Local\nvim\autoload\plug.vim --create-dirs
                        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
            autocmd VimEnter * PlugInstall | source $MYVIMRC
            augroup vimplug
                autocmd!
                autocmd VimEnter * PlugInstall | source $MYVIMRC
            augroup END
        endif
        silent! call plug#begin('H:\cygwin_64_install\home\kg314\AppData\Local\nvim\plugged') " Initiate actual plugin names (Neovim on WINDOWS)
        source H:\cygwin_64_install\home\kg314\dotfiles\vim\plugcalls.vim
        silent! call plug#end()  " Finish loading plugins (Neovim on WINDOWS)
    else
        if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))  " *nix platform (Neovim)
            silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
                        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
            autocmd VimEnter * PlugInstall | source $MYVIMRC
            augroup vimplug
                autocmd!
                autocmd VimEnter * PlugInstall | source $MYVIMRC
            augroup END
        endif
        silent! call plug#begin('~/.local/share/nvim/plugged') " Initiate actual plugin names (Neovim on *NIX)
        source ~/dotfiles/vim/plugcalls.vim
        silent! call plug#end()  " Finish loading plugins (Neovim on *NIX)
    endif
else

    " Placeholder for vim-plug install (replicate above lines with the --sync flag) on regular Vim

    " Set the below config options only for regular Vim, since the below options are already the default in Neovim
    if has('autocmd')
        filetype plugin indent on
    endif
    if has('syntax') && !exists('g:syntax_on')
        syntax enable
    endif

    set autoindent " Use indent of previous line on new lines

    " Let me backspace over pretty much anything
    set backspace+=eol    " Line breaks
    set backspace+=indent " Spaces from 'autoindent'
    set backspace+=start  " The start of current insertion

    set smarttab
    set nrformats-=octal  " Treat numbers with a leading zero as decimal, not octal
    set incsearch         " Show search matches as I type my pattern
    set laststatus=2

    if has('cmdline_info')
        set ruler         " Show the ruler
        set showcmd
    endif

    set wildmenu
    set display+=lastline " Same as :registers.Display the contents of all

    " Use UTF-8 if we can and env LANG didn't tell us not to
    if has('multi_byte') && !exists('$LANG') && &encoding ==# 'latin1'
        setglobal termencoding=utf-8 fileencodings= " termencoding has been removed in neovim
        scriptencoding utf-8
        set encoding=utf-8 " String-encoding used internally and for |RPC| communication. Always UTF-8.
    endif

    if v:version > 703 || v:version == 703 && has("patch541")
        set formatoptions+=j " Delete comment character when joining commented lines
    endif

    " set tags=./tags;,tags
    " set tags=tags;~,.tags;~
    " set tags=./tags;/   " recurse up directories looking for tag files
    if has('path_extra')
        setglobal tags-=./tags tags-=./tags; tags^=./tags;
    endif

    " set autoread   " Autoread when a file is changed from outside. Also set by the Terminus plugin

    if &history < 1000
        set history=1000
    endif

    if &tabpagemax < 50
        set tabpagemax=50
    endif

    if !empty(&viminfo)
        set viminfo^=!
    endif

    " Make sessions usable
    if exists('+sessionoptions')
        set sessionoptions-=options       " No global options or mappings
        set sessionoptions-=localoptions  " No buffer options or mappings
    endif

    " Allow color schemes to do bright colors without forcing bold.
    if &t_Co == 8 && $TERM !~# '^linux\|^Eterm'
        set t_Co=16
    endif

    set belloff=all
    " cscopeverbose enable
    set hlsearch          " Highlight completed searches; clear on reload
    set ttyfast
    " set cpoptions+=J
    set background=dark
    silent! set ttymouse= " No terminal mouse, even if we could
    silent! set noesckeys " Don't wait for a key after Escape in insert mode. In vim-tiny but not Neovim, so just suppress errors
endif

if has('win32') || has('win64')
    source H:\cygwin_64_install\home\kg314\dotfiles\vim\xvim_common_plugin_mappings.vim
    source H:\cygwin_64_install\home\kg314\dotfiles\vim\filetype.vim
else
    source ~/dotfiles/vim/xvim_common_plugin_mappings.vim
    source ~/dotfiles/vim/filetype.vim
endif

set nowritebackup
inoremap <C-U> <C-G>u<C-U>
set cpoptions-=a " stop the :read command from annoyingly setting the alternative buffer

set pyxversion=3

if has('gui_running')||has('termguicolors')
    set termguicolors
    " let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    " let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    silent! colorscheme gruvbox
endif

" enable italics for comments
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"


" The all-important default indent settings; filetypes to tweak
set expandtab      " Use spaces instead of tabs
set copyindent     " Copy the previous indentation on autoindenting
set preserveindent
" set smartindent
set shiftwidth=4   " Indent with four spaces
set softtabstop=4  " Insert four spaces with tab key

" Indent wrapped lines
 if has('linebreak')
     set linebreak               " Wrap lines at convenient point (only affects the on-screen display, not actual content in file) " Break lines at word boundaries
     let &showbreak='↪ '
     " set showbreak=…
     set breakat=\ \ ;:,!?  " which characters might cause a line break if 'linebreak' is on.  
     if exists('+breakindent')
         set breakindentopt=shift:2,sbr
         silent! set breakindent " Every wrapped line will continue visually indented (same amount of space as the beginning of that line), thus preserving horizontal blocks of text.
     endif
 endif

" " Clear default 'comments' value, let the filetype handle it
" " set comments=

" Add completion options
if exists('+completeopt')
    " set completeopt+=longest  " Insert longest common substring
    " set completeopt+=menuone  " Show the menu even if only one match
    " set completeopt+=noinsert
    set completeopt+=longest,menuone,noselect,preview
endif

set complete=.,w,b,u,t,i,kspell,U,s,k,d,] ". through t is the default. . = current buffer. w  = any other windows, b = any other buffers opened, u = unopened buffers, t = tags, i = current and included files

set confirm " Give me a prompt instead of just rejecting risky :write, :saveas

" if exists('+cursorline')
"     set cursorline  " at first, start vim with cursorline enabled
"     " Afterwards, only show the cursorline in the current window and in normal mode.
"     augroup cline
"         autocmd!
"         autocmd WinLeave,InsertEnter * setlocal nocursorline
"         autocmd WinEnter,InsertLeave * setlocal cursorline
"     augroup END
" endif

set updatecount=100 " After typing these no. of characters, the swap file will be written to disk.  When zero, no swap file will be created at all (see chapter on recovery).
set updatetime=275  " milliseconds elapsed before which swap file will be written to disk (250ms is recommended by the gitgutter plugin, 300 ms by coc.nvim). " You will have bad experience for diagnostic messages when it's default 4000.


" Delete comment leaders when joining lines, if supported (+j)
augroup formatoptionsctrl
    autocmd!
    autocmd FileType * setlocal formatoptions-=o "default is jcroql
augroup END

"default is jcroql (q = Allow formatting of comments with "gq". l = Long lines are not broken in insert mode: When a line was longer than 'textwidth' when the insert command started, Vim does not automatically format it.)

" set formatoptions-=r " Automatically insert the current comment leader after hitting <Enter> in Insert mode.
" set formatoptions-=o " Automatically insert the current comment leader after hitting 'o' or 'O' in Normal mode.
" set formatoptions-=c " Auto-wrap comments using textwidth, inserting the current comment leader automatically.
" set formatoptions+=j " Already in the default. Where it makes sense, remove a comment leader when joining lines.  

set winaltkeys=no

set hidden       " Allow buffers to have changes without being displayed
" set include=     " Don't assume I'm editing C; let the filetype set this
set nojoinspaces " Don't join lines with two spaces at the end of sentences
set lazyredraw   " Don't redraw the screen during batch execution

" Define extra 'list' display characters
" if &listchars ==# 'eol:$'
    set listchars+=extends:>  " Unwrapped text to screen right
    set listchars+=precedes:< " Unwrapped text to screen left
    set listchars+=tab:▸\     " Tab characters, preserve width
    set listchars+=trail:·    " Trailing spaces
" endif
set list!

" Options for file search with gf/:find
if !has('win32') || !has('win64')
    set path-=/usr/include  " Let the C/C++ filetypes set that
endif
set path+=**            " Search current directory's whole tree

silent! set shortmess+=I  " don't give the intro message when starting Vim |:intro|.
silent! set shortmess+=c " don't give |ins-completion-menu| messages.  For example, -- XXX completion (YYY)", "match 1 of 2", "The only match", Pattern not found", "Back at original", etc.


" New window positioning
set splitbelow  " Below the current window, not above
set splitright  " Right of the current window, not left

" " Give me a bit longer to complete mappings. 

set timeoutlen=3000 " Default is 1000
" set timeout       " Default. Timeout on mappings and keycodes (stronger of the two conditions)


" Keep undo files, hopefully in a dedicated directory
if has('persistent_undo')
    if has('win32') || has('win64')
        " if empty(glob(&undodir))
        "     silent call system('mkdir -p ~/vimfiles/cache/undo/')
        " endif
        if has('nvim')
            set undodir=H:\cygwin_64_install\home\kg314\AppData\Local\nvim\undo-dir\
        else
            set undodir=~/vimfiles/cache/undo
        endif
    else
        if !isdirectory($HOME."/.vim/undo-dir")
            call mkdir($HOME."/.vim/undo-dir", "", 0700)
        endif
        set undodir=~/.vim/undo-dir
    endif
    set undofile
    " set undolevels=1000  " Already the default
    " set undoreload=10000
endif

" set wildchar=<Tab>         " Already the default. Character for CLI expansion (TAB-completion)
" set wildmode=list:longest " Tab press completes and lists
set wildmode=longest,list:full  " Tab press completes and lists
silent! set wildignorecase " Case insensitive, if supported

" Let me move beyond buffer text only in visual block mode
if exists('+virtualedit')
    set virtualedit+=block
endif

set cmdheight=2 " Height of command-line (easy-readable). Better display for messages.

augroup FileChangedAlert
    " Helps if you have to use another editor on the same file
    autocmd! FileChangedShell * echoerr "File has been changed outside of Vim."
augroup END

set fileformats=unix,dos,mac

" " set formatlistpat=^\\s*[-*]\\s\\+
" " set formatlistpat+=\\\|^\\s*(\\(\\d\\+\\\|[a-z]\\))\\s\\+
" " set formatlistpat+=\\\|^\\s*\\(\\d\\+\\\|[a-z]\\)[:).]\\s\\+

set formatlistpat=^\\s*                " Optional leading whitespace
set formatlistpat+=[                   " Start character class
set formatlistpat+=\\[({]\\?           " |  Optionally match opening punctuation
set formatlistpat+=\\(                 " |  Start group
set formatlistpat+=[0-9]\\+            " |  |  Numbers
set formatlistpat+=\\\|                " |  |  or
set formatlistpat+=[a-zA-Z]\\+         " |  |  Letters
set formatlistpat+=\\)                 " |  End group
set formatlistpat+=[\\]:.)}            " |  Closing punctuation
set formatlistpat+=]                   " End character class
set formatlistpat+=\\s\\+              " One or more spaces
set formatlistpat+=\\\|                " or
set formatlistpat+=^\\s*[-–+o*•]\\s\\+ " Bullet points

set helpheight=12 " Default is 20. Minimal initial height of the help window when it is opened with the :help" command.  

set ignorecase  " Ignore case search for normal letters
set infercase   " Ignore case on insert completion. When doing keyword completion in insert mode |ins-completion|, and 'ignorecase' is also on, the case of the match is adjusted depending on the typed text.  
set smartcase   " Do case-sensitive search if pattern contains upper case letters. Override the 'ignorecase' option if the search pattern contains upper case characters.  

set isfname-={,}
" set keywordprg=:help
" set linespace=0      " No extra spaces between rows. 0 is the default setting.

set magic            " Make regex a little easier to type

" " set noshowmode     " Display the current mode
set nostartofline    " The cursor is kept in the same column (if possible)

set number
set relativenumber

set report=0            " Threshold for reporting number of lines changed.

" set previewheight=20
set pumheight=15          " Set popup menu max height

if !&scrolloff
  set scrolloff=2     " Minimal number of screen lines to keep above and below the cursor
endif
if !&sidescrolloff
  set sidescrolloff=5 " The minimal number of screen columns to keep to the left and to the right of the cursor
endif
set scrolljump=5    " How many lines to scroll at a time, make scrolling appears faster (i.e. when you move the cursor close to the vertical limits of display, how many more lines to reveal ?)
set sidescroll=3    " The minimal number of columns to scroll horizontally

set showmatch
set matchtime=2

" set suffixesadd+=.py,.m,.mat,.gv,.tex ":find will work harder for these filetypes

set synmaxcol=300   " Boost performance in rendering long lines. Default is 3000


set title
set titleold="Terminal"
" set titlestring=%f%(\ [%M]%)
set titlestring=%t%(\ %M%)%(\ (%{expand(\"%:~:.:h\")})%)%(\ %a%)

set viewoptions=folds,cursor,curdir,slash,unix " Changes the effect of the |:mkview| command.  


" Ignore the following type of files when tab completing
set wildignore+=*.jpeg,*.jpg,*.gif,*.bmp,*.svg,*.ps,*.eps,*.pdf,*.png,*.tiff,*.psd
set wildignore+=*.class,*.dmg,*.DS_Store,*.lnk,*.ini,*.mod
set wildignore+=*/tmp/*,*.so,*.db,*.sqlite,*\\tmp\\*
set wildignore+=*.pyc,*.a,*.dll,*.bak,*.exe,*.bin,*.dll,*.manifest
set wildignore+=*.aux,*.bbl,*.blg,*.brf,*.fls,*.fdb_latexmk,*.synctex.gz,*/.cls,*/.fdb*/,*/.toc,*/.glo,*/.log,*/.ist
set wildignore+=*.spl,*.sw?,*.luac,migrations,*.orig,*.fasl,*.dx64fsl,*.lx64fsl
set wildignore+=*.o,*.out,*/.out,*.rbc,*.rbo,*.gem,CVS/*,*.svn,*.hg,*.git
set wildignore+=*/.git/*,.git/,.git/*,*/.svn/*,*/__pycache__/*,*/build/**,build/*,media/*,*/target/*,.idea/
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz,*.7z
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*
set wildignore+=node_modules/*,*/node_modules/*,bower_components/*
set wildignore+=*.swp,*~,._*
set wildignore+=*.obj,*.dats
set wildignore+=types_*taghl,tags,./tags,tags
set wildignore+=_site,*/venv/*,*/.vim$,\~$


set signcolumn=yes " always show signcolumns

highlight clear SignColumn     " SignColumn should match background,SignColumn is the column where |signs| are displayed
highlight Comment cterm=italic gui=italic

highlight link HelpBar Normal
highlight link HelpStar Normal

highlight OverLength ctermfg=0 ctermbg=3
match OverLength /\%121v/


" Vim needs a more POSIX compatible shell than fish for certain functionality to work, such as :%!, compressed help pages and many third-party addons.  If
" you use fish as your login shell or launch Vim from fish, you need to set shell to something else in your ~/.vimrc.
if !has('win32') || !has('win64')
    if &shell =~# 'fish$' && (v:version < 704 || v:version == 704 && !has('patch276'))
        set shell=/usr/bin/env\ bash
    endif
endif

nnoremap J      mzJ`zmz
nnoremap '      `

" nnoremap dp     dp]c
" nnoremap do     do]c

nnoremap : ;
nnoremap ; :
nnoremap Y y$

" Use sane regexes
nnoremap / /\v
vnoremap / /\v
nnoremap ? ?\v
vnoremap ? ?\v

" noremap 0 ^  " Go to the first non-blank character of a line
" noremap ^ 0  " Just in case you need to go to the very beginning of a line

" " Visual line repeat
" xnoremap . :normal .<CR>
" xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

" function! ExecuteMacroOverVisualRange()
"     echo '@'.getcmdline()
"     execute ":'<,'>normal @".nr2char(getchar())
" endfunction

" Move across wrapped lines like regular lines
map k gk
map j gj
map <Up> gk
map <Down> gj

nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'

" " nnoremap gV     `[V`]

cnoremap <c-n>  <down>
cnoremap <c-p> <up>

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv
xnoremap > >gv
xnoremap < <gv
" xnoremap < <gvoremap w!! w !sudo tee > /dev/null %

vnoremap y myy`ymy
vnoremap Y myY`ymy

" Disable some mappings
noremap  <f1>   <nop>
inoremap <f1>   <nop>
nnoremap Q      <nop> " disables ex-mode

inoremap <c-c> <ESC> " CTRL-C doesn't trigger the InsertLeave autocmd . map to <ESC> instead.

" Navigate folds
nnoremap          zf zMzvzz
nnoremap <silent> zj zcjzOzz
nnoremap <silent> zk zckzOzz
nnoremap <Space> za

" Remap normal/visual & to preserve substitution flags
nnoremap <silent> & :&&<CR>
xnoremap <silent> & :&&<CR>

"=====[ Make jump-selections work better in visual block mode ]=================
xnoremap <expr>  G   'G' . virtcol('.') . "\|"
xnoremap <expr>  }   '}' . virtcol('.') . "\|"
xnoremap <expr>  {   '{' . virtcol('.') . "\|"

" https://bluz71.github.io/2017/05/15/vim-tips-tricks.html
" Substitute word under cursor and dot repeat
nnoremap <silent> \c :let @/='\<'.expand('<cword>').'\>'<CR>cgn
xnoremap <silent> \c "sy:let @/=@s<CR>cgn

" show options if tag has multiple matches
nnoremap <C-]> g<C-]>

cnoreabbrev <expr> w getcmdtype() == ":" && getcmdline() == 'w' ? 'up' : 'w' " Replace :w with :up

tnoremap <Esc> <C-\><C-n>
if has('nvim')
  " nnoremap <silent> <c-c><c-c> :split term://zsh<cr>i
  tnoremap <c-w>    <c-\><c-n><c-w>
else
  " nnoremap <silent> <c-c><c-c> :terminal<cr>
endif

if !has('win32') || !has('win64')
    augroup disableTempUndo
        autocmd!
        autocmd BufWritePre /tmp/* setlocal noundofile
    augroup END
endif

let g:netrw_altv           = 1
let g:netrw_banner         = 0
let g:netrw_browse_split   = 4 " Open file in previous buffer
let g:netrw_fastbrowse     = 2
let g:netrw_keepdir        = 0
let g:netrw_list_hide      = netrw_gitignore#Hide()
let g:netrw_list_hide     .= ',\(^\|\s\s\)\zs\.\S\+'
let g:netrw_list_hide     .= '\.un\~$'
let g:netrw_liststyle      = 3 " Use tree-mode as default view
let g:netrw_preview        = 1 " preview window shown in a vertically split
let g:netrw_retmap         = 1
let g:netrw_silent         = 1
" let g:netrw_sort_by        = 'time'
" let g:netrw_sort_direction = 'reverse'
let g:netrw_sort_options   = 'i'
let g:netrw_sort_sequence  = '[\/]$,*'
let g:netrw_special_syntax = 1
let g:netrw_winsize        = 20

augroup reload_vimrc
    autocmd!
    autocmd BufWritePost $MYVIMRC,$MYGVIMRC nested source %
    " au FocusLost * :wa
augroup END

" Remember cursor position
augroup vimrc-remember-cursor-position
    autocmd!
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

" Disable a lot of unnecessary internal plugins
let g:loaded_2html_plugin     = 1
let g:loaded_getscriptPlugin  = 1
let g:loaded_gzip             = 1
let g:loaded_logipat          = 1
let g:loaded_rrhelper         = 1
let g:loaded_spellfile_plugin = 1
let g:loaded_tarPlugin        = 1
let g:loaded_vimballPlugin    = 1
let g:loaded_zipPlugin        = 1
let g:loaded_matchparen       = 1

let loaded_matchit = 1

" https://vimrcfu.com/snippet/186  " let terminal resize scale the internal windows
augroup autoresizewindows
    autocmd!
    autocmd VimResized * :wincmd =
augroup END


let g:tex_flavor = 'latex'
let g:tex_isk='48-57,a-z,A-Z,192-255,:'
" " let g:tex_stylish = 1
" let g:tex_conceal = ''

set diffopt=filler,vertical,foldcolumn:0,context:4
set diffopt+=iwhiteall

if has('patch-8.1.360') " || has('nvim')
  " set diffopt+=internal,algorithm:patience,indent-heuristic
  set diffopt+=indent-heuristic,algorithm:histogram
  set diffopt+=hiddenoff
endif

set fillchars=vert:│,fold:\ " ,diff:⣿

if has('nvim')
    set fillchars+=eob:\ |  " no ~ for end-of-buffer lines.
endif

if exists('&inccommand')
    set inccommand=split
endif

" https://www.reddit.com/r/neovim/comments/b7ie4e/where_to_find_added_features_ie_vscodeesque/
if has('nvim')
    set wildoptions+=tagfile,pum
    " set wildoptions+=pum

    " https://github.com/neovim/neovim/issues/9953
    if &wildoptions == "pum"
        cnoremap <expr> <up>   pumvisible() ? "<C-p>" : "\<up>"
        cnoremap <expr> <down> pumvisible() ? "<C-n>" : "\<down>"
    endif
endif

set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " Probably overridden by status-line plugins

" https://vimways.org/2018/vim-and-git/
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$' " Nobody wants to commit merge conflict markers, so let’s highlight these so we can’t miss them:

augroup focuslostaucmd
  autocmd!
  " this one is which you're most likely to use?
  autocmd FocusLost * stopinsert
augroup END

set pyxversion=3

autocmd CompleteDone * if pumvisible() == 0 | silent! pclose | endif

" https://unix.stackexchange.com/questions/31154/spell-check-comments-in-vim


" " Use <C-L> to clear the highlighting of :set hlsearch.
" if maparg('<C-L>', 'n') ==# ''
"   nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
" endif

" nnoremap <c-h> <c-w>h
" nnoremap <c-j> <c-w>j
" nnoremap <c-k> <c-w>k
" nnoremap <c-l> <c-w>l

" " Center screen on next/previous selection.
" nnoremap n nzz
" nnoremap N Nzz

" set winminheight=4  " Minimum height of windows. Default is 1.

" noremap <Leader>f :filetype detect<CR>

" "" Move visual block
" vnoremap J :m '>+1<CR>gv=gv
" vnoremap K :m '<-2<CR>gv=gv

" " The PC is fast enough, do syntax highlight syncing from start unless 200 lines
" augroup vimrc-sync-fromstart
"     autocmd!
"     autocmd BufEnter * :syntax sync maxlines=200
" augroup END

" " checktime is set by the wincent/terminus plugin
" augroup checktimeaugroup
"     autocmd!
"     au FocusGained,BufEnter * :checktime
"     " autocmd FocusGained,CursorHold ?* if getcmdwintype() == '' | checktime
" augroup END

" \e forces a buffer to be editable
" nnoremap <Bslash>e :<C-U>setlocal modifiable noreadonly<CR>

" \g changes directory to the current file's location
" nnoremap <Bslash>g :<C-U>cd %:h<CR>:pwd<CR>

" \h toggles highlighting search results
" nnoremap <Bslash>h :<C-U>set hlsearch! hlsearch?<CR>

" \R reloads ~/.vimrc
" nnoremap <Bslash>R :<C-U>source $MYVIMRC<CR>

" " \s toggles spell checking
" nnoremap <Bslash>s :<C-U>setlocal spell! spell?<CR>

" \t shows current filetype
" nnoremap <Bslash>t :<C-U>setlocal filetype?<CR>
" \T clears filetype
" nnoremap <Bslash>T :<C-U>setlocal filetype=<CR>

" " \= runs the whole buffer through =, preserving position
" nnoremap <Bslash>= :<C-U>call vimrc#Anchor('1G=G')<CR>
" " \+ runs the whole buffer through gq, preserving position
" nnoremap <Bslash>+ :<C-U>call vimrc#Anchor('1GgqG')<CR>


" " https://vi.stackexchange.com/questions/7179/preventing-ex-commands-from-altering-the-screen
" " keep screen view while executing ex command
" function! KeepEx(arg)
"     let l:winview = winsaveview()
"     execute a:arg
"     call winrestview(l:winview)
" endfunction

" command! -nargs=+ -completion=command K :call KeepEx("<args>")

" " https://vimrcfu.com/snippet/116
" " Display the numbered registers, press a key and paste it to the buffer
" function! Reg()
"     reg
"     echo "Register: "
"     let char = nr2char(getchar())
"     if char != "\<Esc>"
"         execute "normal! \"".char."p"
"     endif
"     redraw
" endfunction

" command! -nargs=0 Reg call Reg() " Provides the useful :Reg command

" inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<cr>"

" " My brain can't ever remember digraph codes
" inoremap <c-k><c-k> <esc>:help digraph-table<cr>

" set conceallevel=0

" set tagrelative " use relative paths for tags. Default is on

" function! EmptyBuffer()
"     if @% == ""
"         setfiletype txt
"     endif
" endfunction

" augroup EmptyTheBuffer
"     autocmd!
"     autocmd BufEnter * call EmptyBuffer()
" augroup END

" " If available, use GNU grep niceties for searching, but system calls are very expensive for startup
" if system('grep --version') =~# '^grep (GNU grep)'
"     set grepprg=grep\ -HnRs\ --exclude='.git*'
" endif

" if exists('$TMUX')
"     let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
"     let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
" else
"     let &t_SI = "\e[6 q"
"     let &t_EI = "\e[2 q"
"     let &t_SI = "\<Esc>]50;CursorShape=1\x7"
"     let &t_EI = "\<Esc>]50;CursorShape=0\x7"
" endif

" if has('folding')
"     " set foldenable
"     " set foldlevelstart=99
"     " set foldmethod=indent
" endif

" numbered and named registers. lastline is already in the default options. 

" if &modifiable
"     set fileformat=unix " unix is already the default
" endif

" set numberwidth=5               " Width of the line-no. column
" augroup changenumbering
"     autocmd!
"     autocmd InsertEnter * :set norelativenumber
"     autocmd InsertLeave * :set relativenumber
" augroup END

" augroup completedone
"     autocmd!
"     " autocmd CompleteDone * silent! pclose!
"     " autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
" augroup END

" " nnoremap <leader>q gqip

" ttimeoutlen is set by the Terminus plugin
" if !has('nvim') && &ttimeoutlen == -1
"     set ttimeout
"     set ttimeoutlen=100
" else
"     set ttimeoutlen=0 " A non-negative number here will make the delay to be timeoutlen
" endif

" " Try to keep backups in one system-appropriate dir
" if has('win32') || has('win64')
"     if has('nvim')
"         " if !isdirectory("H:\cygwin_64_install\home\kg314\AppData\Local\nvim\backup-dir")
"         "     call mkdir('H:\cygwin_64_install\home\kg314\AppData\Local\nvim\backup-dir','p')
"         " endif
"         set backupdir=H:\cygwin_64_install\home\kg314\AppData\Local\nvim\backup-dir
"     else
"         set backupdir=~\vimfiles\cache\backup
"     endif
" else
"     if !isdirectory($HOME."/.vim/backup-dir")
"         call mkdir($HOME."/.vim/backup-dir", "", 0700)
"     endif
"     set backupdir=~/.vim/backup-dir
" endif

" " Add some paths not to back up
" if has('unix')
"     set backupskip^=/dev/shm/*  " Shared memory RAM disk
"     set backupskip^=/var/tmp/*  " Debian's $TMPDIR for sudoedit(8)
"     set backupskip=/tmp/*,/private/tmp/*" " Make Vim able to edit crontab files again.
" endif
" set backup

" " Try to keep swapfiles in one system-appropriate dir
" if has('win32') || has('win64')
"     if has('nvim')
"         set directory^=~\AppData\Local\nvim\backup-dir\
"     else
"         set directory^=~/.vim/cache/swap//
"     endif
" else
"     if !has('nvim')
"         set directory^=~/.vim/cache/swap/
"     endif
" endif

let g:vimtex_view_method='zathura'
